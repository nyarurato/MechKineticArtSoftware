@page "/settings"
@using MechKineticsArtSoftware.Data
@using ElectronNET.API;
@using ElectronNET.API.Entities;
@inject ConfigManager configmgr
@inject IStringLocalizer<Settings> localizer

<h1>@localizer["title"]</h1>

<div>
    <div class="input-group-prepend">
        <span class="input-group-text">@localizer["numgroup"]</span>
        <input type="text" value="@tmp_config.num_board_group" @onchange="OnChangeBoardNum" class="form-control" />
    </div>

    @for (int i = 0; i < tmp_config.boards_info.Count; i++)
    {
        <div class="input-group-prepend">
            <span class="input-group-text">@localizer["ipaddress"] @i</span>
            <input type="text" @bind="@tmp_config.boards_info[i].ip_address" class="form-control" />
        </div>
    }

    <div class="input-group-prepend">
        <span class="input-group-text">@localizer["nummotor"]</span>
        <input type="text" value="@tmp_config.num_motor" @onchange="OnChangeMotorNum" class="form-control"/>
    </div>

    <h4>@localizer["motorassign"]</h4>
    @for (int i = 0; i < tmp_config.num_motor; i++)
    {
        <div class="input-group">
            <div class="input-group-prepend">
                <span class="input-group-text">@localizer["motor"] @i</span>
            </div>
            <div class="input-group-prepend">
                <span class="input-group-text">@localizer["boardgroup"]</span>
            </div>
            <select name="Board Group Index" class="form-control">
                @for (int j = 0; j < tmp_config.num_board_group; j++)
                {
                    <option value="@j">MainBoard @j</option>
                }
            </select>
            <div class="input-group-prepend">
                <span class="input-group-text">@localizer["boardindex"]</span>
            </div>
            <select name="Board Index" class="form-control">
                <option value="0">MainBoard</option>
                <option value="1">ExtendBoard 1</option>
                <option value="2">ExtendBoard 2</option>
                <option value="3">ExtendBoard 3</option>
                <option value="4">ExtendBoard 4</option>
                <option value="5">ExtendBoard 5</option>
            </select>
            <div class="input-group-prepend">
                <span class="input-group-text">@localizer["axisname"]</span>
            </div>
            <select name="Axis Name" class="form-control">
                <option value="0">X</option>
                <option value="1">Y</option>
                <option value="2">Z</option>
                <option value="3">A</option>
                <option value="4">B</option>
                <option value="5">C</option>
                <option value="6">U</option>
                <option value="7">V</option>
                <option value="8">W</option>
                <option value="9">E0</option>
                <option value="10">E1</option>
                <option value="11">E2</option>
                <option value="12">E3</option>
                <option value="13">E4</option>
                <option value="14">E5</option>
                <option value="15">E6</option>
                <option value="16">E7</option>
                <option value="17">E8</option>
                <option value="18">E9</option>
            </select>
        </div>
        }

    <button @onclick="SaveConf" class="form-control">@localizer["saveconfig"]</button>

    </div>

@code {

    ConfigData tmp_config;

    void SaveConf()
    {
        //configmgr.configData = tmp_config;
        configmgr.SaveSetting(tmp_config);

        //TODO: Reload ALL Object
    }

    void OnChangeBoardNum(ChangeEventArgs e)
    {
        tmp_config.num_board_group = int.Parse(e.Value.ToString());

        if (tmp_config.num_board_group < tmp_config.boards_info.Count)
        {
            tmp_config.boards_info.RemoveRange(tmp_config.num_board_group - 1, tmp_config.boards_info.Count - tmp_config.num_board_group );
        }

        if (tmp_config.num_board_group > tmp_config.boards_info.Count)
        {
            int n = tmp_config.num_board_group - tmp_config.boards_info.Count;
            for (int i = 0; i < n; i++) {
                BoardInfo boardinfo = new BoardInfo();
                boardinfo.ip_address = string.Empty;
                boardinfo.board_group_index = i;
                tmp_config.boards_info.Add(boardinfo);
            }
        }

        StateHasChanged();
    }

    void OnChangeMotorNum(ChangeEventArgs e)
    {
        tmp_config.num_motor = int.Parse(e.Value.ToString());

        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        tmp_config = configmgr.GetClonedConfigData();

    }
}
