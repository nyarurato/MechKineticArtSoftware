@page "/animator"

@using MechKineticsArtSoftware.Data
@using System.IO;
@using ElectronNET.API.Entities
@using ElectronNET.API;
@inject LogWriter logger
@inject ConfigManager configmgr
@inject WebAPIManage apidata
@inject KeyFrameManager kfmgr
@inject IStringLocalizer<Animator> localizer

<h1>@localizer["motioncreator"]</h1>

<div class="form-group">
    <h3>@localizer["keyframe"]</h3>
    <div class="row">
        <div class="col-9">
            <input type="range" class="form-control-range" @onchange="OnKeyFrameChange" max="@configmgr.configData.max_keyframe" value="@current_keyframe">
            <div class="row">
                @for (int i = 0; i < configmgr.configData.max_keyframe; i++)
                {
                    int local = i;
                    <span class="col">

                        @if (kfmgr.keyframes.Count > local)
                        {
                            if (kfmgr.keyframes[local].action == Keyframe.Action.MOVETO)
                            {
                                <span class="badge badge-success">@localizer["move"]</span>
                            }
                            else if (kfmgr.keyframes[local].action == Keyframe.Action.RAPIDMOVE)
                            {
                                <span class="badge badge-warning">@localizer["rapid"]</span>
                            }
                            else if (kfmgr.keyframes[local].action == Keyframe.Action.WAITTIME)
                            {
                                <span class="badge badge-primary">@localizer["wait"]</span>

                            }
                            else if (kfmgr.keyframes[local].action == Keyframe.Action.ENDOFPROGRAM)
                            {
                                <span class="badge badge-danger">@localizer["end"]</span>

                            }
                            else
                            {
                                <span class="badge badge-secondary">@localizer["none"]</span>

                            }
                        }

                    </span>
                }
            </div>

        </div>
        <div class="col-3">
            <input type="number" @onchange="OnKeyFrameChange" step="1" value="@current_keyframe" />
        </div>
    </div>
</div>


<div class="form-group">
    <h4>@localizer["keyframeaction"]</h4>
    <div class="row">
        <div class="col-5">
            <div>
                <select @bind="current_action" class="form-control">
                    <option value="1">@localizer["moveto"]</option>
                    <option value="2">@localizer["rapidmove"]</option>
                    <option value="3">@localizer["waittime"]</option>
                    <option value="4" disabled>@localizer["waitotherboard"]</option>
                    <option value="255">@localizer["endprogram"]</option>
                </select>
            </div>
        </div>
        <div class="col-5">

            @if (feedrate_inputbox_show_flag)
            {
                <div>
                    @localizer["feedrate"]
                    <input type="number" @bind="feedrate" step="100" />
                </div>
            }

            @if (waittime_inputbox_show_flag)
            {
                <div>
                    @localizer["waitduration"]
                    <input type="number" @bind="wait_time" step="0.5" />
                </div>
            }
        </div>
    </div>
    <h4>@localizer["keyframeutility"]</h4>
    <div class="row">
        <div class="col-2">
            <button class="btn btn-primary" @onclick="OnClickSetKeyFrame">@localizer["setkeyframe"]</button>
        </div>
        <div class="col-2">
            <button class="btn btn-primary" @onclick="OnClickMove">@localizer["testmove"]</button>
        </div>
    </div>
    <div class="row">
        <div class="col-2">
            <button class="btn btn-secondary" @onclick="OnClickMakeNC">@localizer["makenc"]</button>
        </div>
        <div class="col-2">
            <button class="btn btn-secondary" @onclick="OnClickSendNC">@localizer["sendnc"]</button>
        </div>
    </div>
    <div class="row">

        <div class="col-2">
            <button class="btn btn-success" @onclick="OnClickSave">@localizer["savekeyframedata"]</button>
        </div>
        <div class="col-2">
            <button class="btn btn-light" @onclick="OnClickLoad">@localizer["loadkeyframedata"]</button>
        </div>
    </div>
    <!--
    <div class="row">


        <div class="col-2">
            <button class="btn btn-success" @onclick=@(() => kfmgr.SaveAsCsv("./keyframes.csv") )>@localizer["savekeyframedata"] CSV</button>
        </div>
        <div class="col-2">
            <button class="btn btn-light" @onclick=@(() => { kfmgr.LoadAsCsv("./keyframes.csv"); SyncDatasFromKeyFrame();} )>@localizer["loadkeyframedata"] CSV</button>
        </div>
    </div>
    -->
</div>

<div class="btn-group-toggle" data-toggle="buttons">
    <label class="btn btn-secondary active">
        <input type="checkbox" autocomplete="off" @bind="is_active_slider_input">@localizer["activeslider"] @is_active_slider_input
    </label>
</div>

<div class="card-deck">

    @for (int i = 0; i < configmgr.configData.num_motor; i++)
    {
        int local_val = i;
        <AnimatorMoveToWidget motor_index=local_val @bind-movetopos=@unit_positions[local_val] currentpos=@apidata.motor_list[local_val].position @bind-is_enable_slider="is_active_slider_input"></AnimatorMoveToWidget>
    }

</div>


@code {
    bool feedrate_inputbox_show_flag = true;
    bool waittime_inputbox_show_flag = false;


    int current_keyframe { get; set; } = 0;

    float[] unit_positions;

    int _current_action = 1;
    int current_action
    {
        get { return _current_action; }
        set
        {
            _current_action = value;
            OnKeyFrameActionChange(value);
        }
    }

    int feedrate = 500;

    float wait_time = 4.5f;

    bool is_active_slider_input = false;


    void OnKeyFrameChange(ChangeEventArgs e)
    {
        current_keyframe = int.Parse(e.Value.ToString());
        SyncDatasFromKeyFrame();
    }

    void SyncDatasFromKeyFrame()
    {
        if (kfmgr.keyframes.Count > current_keyframe)
        {
            kfmgr.keyframes[current_keyframe].unit_motion.CopyTo(unit_positions, 0);
            feedrate = kfmgr.keyframes[current_keyframe].move_speed;
            wait_time = kfmgr.keyframes[current_keyframe].wait_time;
            current_action = ((int)kfmgr.keyframes[current_keyframe].action);
        }

        if (current_keyframe > configmgr.configData.max_keyframe)
        {
            configmgr.configData.max_keyframe = current_keyframe;
            StateHasChanged();

        }
    }

    void OnKeyFrameActionChange(int val)
    {
        switch (val)
        {
            case 0:
                break;
            case 1:
                feedrate_inputbox_show_flag = true;
                waittime_inputbox_show_flag = false;
                break;
            case 2:
                feedrate_inputbox_show_flag = false;
                waittime_inputbox_show_flag = false;
                break;
            case 3:
                feedrate_inputbox_show_flag = false;
                waittime_inputbox_show_flag = true;
                break;
            case 4:
                feedrate_inputbox_show_flag = false;
                waittime_inputbox_show_flag = false;
                break;
            case 255:
                feedrate_inputbox_show_flag = false;
                waittime_inputbox_show_flag = false;
                break;
            default:
                break;
        }

    }

    void OnClickSetKeyFrame()
    {
        if (kfmgr.keyframes.Count <= current_keyframe)
        {
            kfmgr.keyframes.Add(new Keyframe());
        }
        kfmgr.keyframes[current_keyframe].action = (Keyframe.Action)current_action;

        kfmgr.keyframes[current_keyframe].index = current_keyframe;
        kfmgr.keyframes[current_keyframe].move_speed = feedrate;

        kfmgr.keyframes[current_keyframe].wait_time = wait_time;
        kfmgr.keyframes[current_keyframe].ArrayCopy(unit_positions);

        current_keyframe++;

        SyncDatasFromKeyFrame();
    }

    void OnClickMakeNC()
    {
        for (int i = 0; i < configmgr.configData.num_board_group; i++)
        {
            ParentBoard parentBoard = apidata.GetBoardFromIndex(i);
            KeyFrameCAM keyFrameCAM = new KeyFrameCAM(i, apidata, logger);

            keyFrameCAM.MakeNCFile(configmgr.configData.save_nc_path_on_pc_directory
                + configmgr.configData.nc_file_name
                + i.ToString()
                + configmgr.configData.nc_file_name_ext
                , kfmgr.keyframes, configmgr.configData.is_enable_ncfile_loop);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        unit_positions = new float[configmgr.configData.num_motor];
        await base.OnInitializedAsync();
    }

    async void OnClickSendNC()
    {
        MessageBoxOptions messageBoxOptions = new MessageBoxOptions(localizer["nc_run_message"])
        {
            Type = MessageBoxType.info,
            Title = "Run NC File",
            Buttons = new string[]{ "OK", "Cancel" },

        };

        MessageBoxResult res = await Electron.Dialog.ShowMessageBoxAsync(messageBoxOptions);

        if (res.Response == 1)//Cancel
            return;


        for (int i = 0; i < configmgr.configData.num_board_group; i++)
        {
            try
            {
                using (StreamReader sr = new StreamReader(configmgr.configData.save_nc_path_on_pc_directory
                                                        + configmgr.configData.nc_file_name
                                                        + i.ToString()
                                                        + configmgr.configData.nc_file_name_ext))
                {
                    ParentBoard parentBoard = apidata.GetBoardFromIndex(i);


                    bool result = await parentBoard.webAPI.SendFile(sr, configmgr.configData.save_path_on_board);
                }

            }
            catch (Exception e)
            {
                logger.WriteLogln($"Can NOT Send NC File\n{e.Message}");
            }
        }
    }

    async void OnClickMove()
    {
        string order = "G0";

        await apidata.GetPositions();

        for (int i = 0; i < configmgr.configData.num_board_group; i++)
        {
            var mlist = apidata.GetMotorListOnSameBoardGroup(i);
            bool is_exist_e_axis = false;
            foreach (Motor motor in mlist)
            {

                if (motor.is_e_axis_motor)
                {
                    is_exist_e_axis = true;
                }
                else
                {
                    order += $" {motor.axis_name}{unit_positions[motor.unit_index]}";
                }

            }

            // E1 E2 E3.... -> Exx:xx:xx:xx
            if (is_exist_e_axis)
            {
                string eorder = " E";
                var e_axis = mlist.FindAll(x => (x.is_e_axis_motor));
                e_axis.OrderBy(x => (x.axis_name));//E0,E1...E4,E5...
                bool is_first_flag = true;

                foreach (Motor emotor in e_axis)
                {
                    // Convert Abs coord to Rel coord for E-axis
                    eorder += $"{(is_first_flag ? string.Empty : ':')}" + $"{emotor.CalcRelativePosFromCurrentPos(unit_positions[emotor.unit_index])}";
                    is_first_flag = false;
                }

                order += eorder;
            }
            await apidata.GetBoardFromIndex(i).webAPI.SendGcode(order);
        }


    }

    async void OnClickSave()
    {
        var saveOptions = new SaveDialogOptions
        {
            Title = "Save motion datas",
            DefaultPath = await Electron.App.GetAppPathAsync(),
            Filters = new FileFilter[]
            {
                new FileFilter{ Name = "CSV",Extensions= new string[]{"csv"} },
                new FileFilter{ Name = "XML",Extensions= new string[]{"xml"} }

                }
        };
        string sa_path = await Electron.Dialog.ShowSaveDialogAsync(Electron.WindowManager.BrowserWindows.First(), saveOptions);

        if (sa_path == "")
            return;

        string ext = Path.GetExtension(sa_path);

        if (string.Equals(ext, ".csv", StringComparison.OrdinalIgnoreCase))//csv
        {
            kfmgr.SaveAsCsv(sa_path);
            logger.WriteLogln($"Save CSV: {sa_path}");
        }
        else if (string.Equals(ext, ".xml", StringComparison.OrdinalIgnoreCase))//xml
        {
            kfmgr.Save(sa_path);
            logger.WriteLogln($"Save XML: {sa_path}");

        }
        else
        {
            logger.WriteLogln($"CAN NOT Save: invalid extension :{ext}");

        }


    }

    async void OnClickLoad()
    {
        var openOptions = new OpenDialogOptions
        {
            Title = "open motion datas",
            DefaultPath = await Electron.App.GetAppPathAsync(),
            Filters = new FileFilter[]
            {
                new FileFilter{ Name = "CSV",Extensions= new string[]{"csv"} },
                new FileFilter{ Name = "XML",Extensions= new string[]{"xml"} }

                },

        };
        string[] f_path = await Electron.Dialog.ShowOpenDialogAsync(Electron.WindowManager.BrowserWindows.First(), openOptions);

        logger.WriteLogln($"{f_path.First()}");


        if (f_path.Length == 0)
            return;

        string ext = Path.GetExtension(f_path.First());

        if (string.Equals(ext, ".csv", StringComparison.OrdinalIgnoreCase))//csv
        {
            kfmgr.LoadAsCsv(f_path.First());
            logger.WriteLogln($"Load CSV: {f_path}");

        }
        else if (string.Equals(ext, ".xml", StringComparison.OrdinalIgnoreCase))//xml
        {
            kfmgr.Load(f_path.First());
            logger.WriteLogln($"Load XML: {f_path}");

        }
        else
        {
            logger.WriteLogln($"CAN NOT Load: invalid extension :{ext}");

        }

        SyncDatasFromKeyFrame();
        StateHasChanged();
    }



}

