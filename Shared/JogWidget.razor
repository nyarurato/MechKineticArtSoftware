@using MechKineticsArtSoftware
@inject LogWriter logger
@inject WebAPIManage apidata
@inject IStringLocalizer<JogWidget> localizer
@implements IAsyncDisposable


<div class="card">
    <h5 class="card-header">@localizer["motor"] @motor_index</h5>
    <div class="card-body">
        <div class="row">
            <h6 class="card-subtitle m-1">@localizer["jog"]</h6>
        </div>
        <div class="row">
            <div class="input-group m-1">
                <div class="col">
                    <button class="btn btn-primary" type="button" @onclick="JogPlus">+Move</button>
                </div>
                <div class="col">
                    <input type="number" name="jog_move_unit_@motor_index" class="form-control" placeholder="move unit" @bind="jog_unit" />
                </div>
                <div class="col">
                    <button class="btn btn-primary" type="button" @onclick="JogMinus">-Move</button>

                </div>
            </div>
        </div>
        <div class="row">
            <h6 class="card-subtitle m-1">@localizer["moveto"]</h6>
        </div>
        <div class="row">
            <div class="input-group m-1">
                <div class="col">
                    <input type="number" class="form-control" placeholder="MoveToPosition" @bind="moveto">
                </div>
                <div class="col">
                    <button class="btn btn-success" type="button" @onclick="ClickMoveTo">@localizer["move"]</button>
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer">
        @localizer["currentpos"]: @current_pos
    </div>
</div>

@code {
    public float current_pos { get; set; }
    float jog_unit = 10;
    float moveto = 0;

    [Parameter]
    public int motor_index { get; set; }

    private System.Threading.Timer timer;


    async void ClickMoveTo()
    {
        await apidata.GetMotorFromMotorIndex(motor_index).MoveTo(moveto);
    }

    async void JogPlus()
    {
        await apidata.GetMotorFromMotorIndex(motor_index).JogMove(Math.Abs(jog_unit));
    }

    async void JogMinus()
    {
        await apidata.GetMotorFromMotorIndex(motor_index).JogMove(-1 * Math.Abs(jog_unit));

    }

    protected override async Task OnInitializedAsync()
    {

        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {

            current_pos = apidata.motor_list[motor_index].position;
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch(Exception e)
            {
                logger.WriteLogln($"Update event miss:{e.Message}");
            }

        }, new System.Threading.AutoResetEvent(false), 0, 500); // fire every 500 milliseconds

        await base.OnInitializedAsync();
    }

    public ValueTask DisposeAsync()
    {
        return timer?.DisposeAsync() ?? ValueTask.CompletedTask;
    }

}