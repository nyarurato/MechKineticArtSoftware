@using MechKineticsArtSoftware
@inject LogWriter logger
@inject WebAPIManage apidata
@inject ConfigManager configmgr
@inject IStringLocalizer<JogWidget> localizer
@implements IAsyncDisposable


<div class="m-1">
    <h5 class="mt-2 mb-1">
        @localizer["motor"] @motor_index
        <i class="oi ml-2 @icon_class"></i>
    </h5>
    <div class="d-inline-flex">
            
        <div class="input-group">
            <div class="input-group-prepend">
                <button class="btn btn-primary" type="button" @onclick="JogPlus">+@localizer["move"]</button>
            </div>
            <input type="number" name="jog_move_unit_@motor_index" class="form-control text-center jog-move-unit" placeholder="move unit" @bind="jog_unit" />
            <div class="input-group-append">
                <button class="btn btn-primary" type="button" @onclick="JogMinus">-@localizer["move"]</button>

            </div>
        </div>
            
        <div class="input-group">
            <span class="d-flex align-items-center mx-1 ml-3">@localizer["targetpos"]:</span>
            <input type="number" class="form-control col-6 jog-move-unit" placeholder="MoveToPosition" @bind="moveto">
            <div class="input-group-append">
                <button class="btn btn-success" type="button" @onclick="ClickMoveTo">@localizer["move"]</button>
            </div>
        </div>
        

    </div>
</div>

@code {
    public float current_pos { get; set; }
    float jog_unit = 10;
    float moveto = 0;

    [Parameter]
    public int motor_index { get; set; }

    private System.Threading.Timer timer;

    string icon_class = string.Empty;

    async void ClickMoveTo()
    {
        await apidata.GetMotorFromMotorIndex(motor_index).MoveTo(moveto);
    }

    async void JogPlus()
    {
        await apidata.GetMotorFromMotorIndex(motor_index).JogMove(Math.Abs(jog_unit));
    }

    async void JogMinus()
    {
        await apidata.GetMotorFromMotorIndex(motor_index).JogMove(-1 * Math.Abs(jog_unit));

    }

    protected override async Task OnInitializedAsync()
    {

        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {

            current_pos = apidata.motor_list[motor_index].position;
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                logger.WriteLogln($"Update event miss:{e.Message}");
            }

        }, new System.Threading.AutoResetEvent(false), 0, 500); // fire every 500 milliseconds

        if (configmgr.configData.motor_icons.ContainsKey(motor_index.ToString()))//icon-class set
            icon_class = configmgr.configData.motor_icons[motor_index.ToString()];


        jog_unit = configmgr.configData.default_jog_move_unit;

        await base.OnInitializedAsync();
    }

    public ValueTask DisposeAsync()
    {
        return timer?.DisposeAsync() ?? ValueTask.CompletedTask;
    }

}