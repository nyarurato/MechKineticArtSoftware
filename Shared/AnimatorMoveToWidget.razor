@using MechKineticsArtSoftware
@inject LogWriter logger
@inject WebAPIManage apidatas
@inject ConfigManager configmgr
@inject IStringLocalizer<AnimatorMoveToWidget> localizer
@implements IAsyncDisposable

<div class="">
    <div class="row">
        <div class="col-4 d-flex align-items-center">
            @localizer["motor"] @motor_index
            <i class="oi ml-2 @icon_class"></i>
        </div>
        <div class="input-group m-1 col-5">
            
                @if (is_enable_slider)
                {
                <input type="range" class="form-control movewidget-range" placeholder="MoveToPosition" @bind="movetopos" max="@configmgr.configData.max_move_range" min="@configmgr.configData.min_move_range">
                <span>@movetopos</span>
                }
                else
                {
                <input type="number" class="form-control" placeholder="MoveToPosition" @bind="movetopos">

                }
         </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<float> movetoposChanged { get; set; }

    [Parameter]
    public EventCallback<float> currentposChanged { get; set; }

    [Parameter]
    public EventCallback<bool> is_enable_sliderChanged { get; set; }

    private System.Threading.Timer timer;


    float _currentpos = 0;

    string icon_class = string.Empty;

    [Parameter]
    public float currentpos
    {
        get { return _currentpos; }
        set
        {
            if (_currentpos != value)
            {

                _currentpos = value;
                currentposChanged.InvokeAsync(_currentpos);
            }
        }
    }


    [Parameter]
    public int motor_index { get; set; }


    float _moveto_pos = 0;

    [Parameter]
    public float movetopos {
        get{ return _moveto_pos; }
        set{ if (_moveto_pos != value) {
                _moveto_pos = value;
                movetoposChanged.InvokeAsync(_moveto_pos);
            }
        }
    }

    bool _is_enable_slider = false;

    [Parameter]
    public bool is_enable_slider
    {
        get { return _is_enable_slider; }
        set
        {
            if (_is_enable_slider != value)
            {
                _is_enable_slider = value;
                is_enable_sliderChanged.InvokeAsync(_is_enable_slider);
            }
        }
    }



    protected override async Task OnInitializedAsync()
    {

        timer = new System.Threading.Timer(async (object? stateInfo) =>
        {

            _currentpos = apidatas.motor_list[motor_index].position;
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch(Exception e)
            {
                logger.WriteLogln($"Update event miss:{e.Message}");
            }

        }, new System.Threading.AutoResetEvent(false), 0, configmgr.configData.position_update_interval/2);// fire half of update time

        if (configmgr.configData.motor_icons.ContainsKey(motor_index.ToString()))//icon-class set
            icon_class = configmgr.configData.motor_icons[motor_index.ToString()];


        await base.OnInitializedAsync();

    }

    public ValueTask DisposeAsync()
    {
        return timer?.DisposeAsync() ?? ValueTask.CompletedTask;
    }

}